{
	"info": {
		"_postman_id": "c62ba73d-5a21-4c3e-90d7-2abe375858e8",
		"name": "Digitree",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42140944",
		"_collection_link": "https://sht-qa-6802.postman.co/workspace/SHT-QA-Workspace~061acec8-e452-4ab4-84c1-dffd3c040209/collection/42140944-c62ba73d-5a21-4c3e-90d7-2abe375858e8?action=share&source=collection_link&creator=42140944"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Get expected values from environment\r",
							"const expectedUsername = pm.environment.get(\"expected_username\");\r",
							"const expectedEmail = pm.environment.get(\"expected_email\");\r",
							"\r",
							"// 1. Test response status code\r",
							"pm.test(\"Status code is 201 Created\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// 2. Test response time\r",
							"pm.test(\"Response time is acceptable\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 3. Validate response structure\r",
							"pm.test(\"Response has correct structure\", function() {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.include.all.keys(\r",
							"        'message', 'username', 'email', \r",
							"        'first_name', 'last_name', \r",
							"        'date_joined', 'last_login'\r",
							"    );\r",
							"});\r",
							"\r",
							"// 4. Fixed: Verify username matches request\r",
							"pm.test(\"Returned username matches request\", function() {\r",
							"    pm.expect(response.username).to.eql(expectedUsername);\r",
							"});\r",
							"\r",
							"// 5. Fixed: Verify email matches request\r",
							"pm.test(\"Returned email matches request\", function() {\r",
							"    pm.expect(response.email).to.eql(expectedEmail);\r",
							"});\r",
							"\r",
							"// 6. Verify success message\r",
							"pm.test(\"Success message is correct\", function() {\r",
							"    pm.expect(response.message).to.eql(\"User registered successfully\");\r",
							"});\r",
							"\r",
							"// Clean up\r",
							"pm.environment.unset(\"testData\");\r",
							"pm.environment.unset(\"expected_username\");\r",
							"pm.environment.unset(\"expected_email\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Function to generate valid username (alphanumeric only)\r",
							"function generateValidUsername() {\r",
							"  const prefix = \"testuser\";\r",
							"  const randomString = Math.random().toString(36).substring(2, 8); // 6 random alphanumeric chars\r",
							"  return `${prefix}${randomString}`;\r",
							"}\r",
							"\r",
							"// Generate and store test data\r",
							"const testData = {\r",
							"  username: generateValidUsername(),\r",
							"  email: `${generateValidUsername()}@digitree.com`,\r",
							"  password: \"Test@1234\",\r",
							"  first_name: \"Test\",\r",
							"  last_name: \"User\"\r",
							"};\r",
							"\r",
							"// Store as environment variables (more reliable than globals)\r",
							"pm.environment.set(\"testData\", JSON.stringify(testData));\r",
							"pm.environment.set(\"expected_username\", testData.username);\r",
							"pm.environment.set(\"expected_email\", testData.email);\r",
							"\r",
							"// Also set as globals if needed elsewhere\r",
							"pm.globals.set(\"dynamic_username\", testData.username);\r",
							"pm.globals.set(\"dynamic_email\", testData.email);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{dynamic_username}}\",\r\n  \"email\": \"{{dynamic_email}}\",\r\n  \"password\": \"SecurePass123!\",\r\n  \"first_name\": \"Test\",\r\n  \"last_name\": \"User\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/register/",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate Status Code (200 OK)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Validate Success Message\r",
							"pm.test(\"Login message is correct\", function() {\r",
							"    jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
							"});\r",
							"\r",
							"// 3. Validate Response Time \r",
							"pm.test(\"Response time is less than 5000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Store the token as an environment variable\r",
							"pm.environment.set(\"auth_token\", response.token);\r",
							"\r",
							"// Validate token exists\r",
							"pm.test(\"Token is present\", function() {\r",
							"    pm.expect(response.token).to.be.a('string');\r",
							"    pm.expect(response.token.split('.')).to.have.lengthOf(3);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\r\n  \"username\": \"testuser2dh8pa\",\n\r\n  \"password\": \"SecurePass123!\"\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/login/",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Preview",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate Status Code (200 OK)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Validate Response Time \r",
							"pm.test(\"Response time is less than 5000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 3. S3 URL Validation\r",
							"pm.test(\"S3 URL is valid\", function() {\r",
							"    pm.expect(response.s3_url).to.match(/^https:\\/\\/.+\\..+\\.net\\/.+/);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/preview/?imageID=1",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"preview",
						""
					],
					"query": [
						{
							"key": "imageID",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Versions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate Status Code (200 OK)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Validate Response Time \r",
							"pm.test(\"Response time is less than 5000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Define the expected schema\r",
							"const versionSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"updateID\": {\"type\": \"number\"},\r",
							"        \"version_number\": {\"type\": \"number\"},\r",
							"        \"processing_time\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
							"        \"edited_by\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"updateID\", \"version_number\", \"processing_time\", \"edited_by\"]\r",
							"};\r",
							"\r",
							"const mainSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"versions\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": versionSchema\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"versions\"]\r",
							"};\r",
							"\r",
							"// 3. Validate against schema\r",
							"pm.test(\"Response matches expected schema\", function() {\r",
							"    pm.expect(response).to.be.jsonSchema(mainSchema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/versions/?imageID=1",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"versions",
						""
					],
					"query": [
						{
							"key": "imageID",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Save",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 2. Validate status code\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Define and validate schema\r",
							"const successSchema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        message: { \r",
							"            type: \"string\",\r",
							"            pattern: \"^Updated JSON saved successfully\\\\.$\" \r",
							"        },\r",
							"        version_count: { type: \"number\", minimum: 1 },\r",
							"        updateID: { type: \"number\", minimum: 1 },\r",
							"        version_number: { type: \"number\", minimum: 1 },\r",
							"        edited_by: { type: \"string\", minLength: 1 }\r",
							"    },\r",
							"    required: [\"message\", \"version_count\", \"updateID\", \"version_number\", \"edited_by\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Response matches success schema\", function() {\r",
							"    pm.expect(response).to.be.jsonSchema(successSchema);\r",
							"});\r",
							"\r",
							"// 4. Specific field validations\r",
							"pm.test(\"Success message is correct\", function() {\r",
							"    pm.expect(response.message).to.eql(\"Updated JSON saved successfully.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Edited by matches expected user\", function() {\r",
							"    // Get username from environment if you stored it during login\r",
							"    const expectedUser = pm.environment.get(\"username\") || \"testuser2dh8pa\";\r",
							"    pm.expect(response.edited_by).to.eql(expectedUser);\r",
							"});\r",
							"\r",
							"pm.test(\"Update ID is valid\", function() {\r",
							"    pm.expect(response.updateID).to.be.a('number').above(0);\r",
							"});\r",
							"\r",
							"// 5. Response time check\r",
							"pm.test(\"Response time is acceptable\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 6. Content-Type validation\r",
							"pm.test(\"Content-Type header is present\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"imageID\": 3,\r\n  \"updated_json\": {\r\n    \"key1\": \"3\",\r\n    \"key2\": \"value4\",\r\n    \"key3\": {\r\n      \"subkey1\": \"anything\",\r\n      \"subkey2\": \"subvalue2\"\r\n    }\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/save/",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"save",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Version JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 2. Validate status code (assuming successful update returns 200)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Define schema for validation\r",
							"const responseSchema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        updateID: {\r",
							"            type: \"number\",\r",
							"            minimum: 1\r",
							"        },\r",
							"        updatedJson: {\r",
							"            type: \"object\",\r",
							"            properties: {\r",
							"                key1: { type: \"string\" },\r",
							"                key2: { type: \"string\" },\r",
							"                key3: {\r",
							"                    type: \"object\",\r",
							"                    properties: {\r",
							"                        subkey1: { type: \"string\" },\r",
							"                        subkey2: { type: \"string\" }\r",
							"                    },\r",
							"                    required: [\"subkey1\", \"subkey2\"]\r",
							"                }\r",
							"            },\r",
							"            required: [\"key1\", \"key2\", \"key3\"]\r",
							"        },\r",
							"        processing_time: {\r",
							"            type: \"string\",\r",
							"            format: \"date-time\"\r",
							"        }\r",
							"    },\r",
							"    required: [\"updateID\", \"updatedJson\", \"processing_time\"]\r",
							"};\r",
							"\r",
							"// 4. Validate against schema\r",
							"pm.test(\"Response matches expected schema\", function() {\r",
							"    pm.expect(response).to.be.jsonSchema(responseSchema);\r",
							"});\r",
							"\r",
							"// 5. Field-specific validations\r",
							"pm.test(\"updateID is valid positive number\", function() {\r",
							"    pm.expect(response.updateID).to.be.a('number').above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"processing_time is valid ISO format\", function() {\r",
							"    const date = new Date(response.processing_time);\r",
							"    pm.expect(date.toString()).to.not.equal('Invalid Date');\r",
							"    pm.expect(response.processing_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z$/);\r",
							"});\r",
							"\r",
							"// 6. Response performance check\r",
							"pm.test(\"Response time is acceptable (<5s)\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 7. Header validation\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/version_json/?imageID=3&version_number=2",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"version_json",
						""
					],
					"query": [
						{
							"key": "imageID",
							"value": "3"
						},
						{
							"key": "version_number",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "See Versions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 2. Validate status code (assuming success is 200)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Define schema for an update object\r",
							"const updateSchema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        updateID: { type: \"number\", minimum: 1 },\r",
							"        imageID: { type: \"number\", minimum: 1 },\r",
							"        updatedJson: {\r",
							"            type: \"object\",\r",
							"            properties: {\r",
							"                key1: { type: \"string\" },\r",
							"                key2: { type: \"string\" },\r",
							"                key3: {\r",
							"                    type: \"object\",\r",
							"                    properties: {\r",
							"                        subkey1: { type: \"string\" },\r",
							"                        subkey2: { type: \"string\" }\r",
							"                    },\r",
							"                    required: [\"subkey1\", \"subkey2\"]\r",
							"                }\r",
							"            },\r",
							"            required: [\"key1\", \"key2\", \"key3\"]\r",
							"        },\r",
							"        version_number: { type: \"number\", minimum: 1 },\r",
							"        processing_time: { type: \"string\", format: \"date-time\" }\r",
							"    },\r",
							"    required: [\"updateID\", \"imageID\", \"updatedJson\", \"version_number\", \"processing_time\"]\r",
							"};\r",
							"\r",
							"// 4. Validate main response structure\r",
							"pm.test(\"Response has correct structure\", function() {\r",
							"    pm.expect(response).to.have.keys(['last_update', 'second_last_update']);\r",
							"    pm.expect(response.last_update).to.be.jsonSchema(updateSchema);\r",
							"    pm.expect(response.second_last_update).to.be.jsonSchema(updateSchema);\r",
							"});\r",
							"\r",
							"// 5. Validate version numbering sequence\r",
							"pm.test(\"Version numbers are sequential\", function() {\r",
							"    const lastVersion = response.last_update.version_number;\r",
							"    const secondLastVersion = response.second_last_update.version_number;\r",
							"    pm.expect(lastVersion).to.equal(secondLastVersion + 1);\r",
							"});\r",
							"\r",
							"// 6. Validate processing time sequence\r",
							"pm.test(\"Last update is newer than second last update\", function() {\r",
							"    const lastTime = new Date(response.last_update.processing_time);\r",
							"    const secondLastTime = new Date(response.second_last_update.processing_time);\r",
							"    pm.expect(lastTime.getTime()).to.be.above(secondLastTime.getTime());\r",
							"});\r",
							"\r",
							"// 8. Validate image IDs match\r",
							"pm.test(\"Both updates reference same image\", function() {\r",
							"    pm.expect(response.last_update.imageID).to.equal(response.second_last_update.imageID);\r",
							"});\r",
							"\r",
							"// 9. Validate JSON content structure\r",
							"pm.test(\"Updated JSON structures match\", function() {\r",
							"    pm.expect(response.last_update.updatedJson).to.have.keys(['key1', 'key2', 'key3']);\r",
							"    pm.expect(response.second_last_update.updatedJson).to.have.keys(['key1', 'key2', 'key3']);\r",
							"});\r",
							"\r",
							"// 10. Validate processing time format for both\r",
							"pm.test(\"Processing times are valid ISO format\", function() {\r",
							"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z$/;\r",
							"    pm.expect(response.last_update.processing_time).to.match(isoRegex);\r",
							"    pm.expect(response.second_last_update.processing_time).to.match(isoRegex);\r",
							"});\r",
							"\r",
							"// 11. Response performance check\r",
							"pm.test(\"Response time is acceptable (<5s)\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 12. Header validation\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/see_versions/?imageID=3",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"see_versions",
						""
					],
					"query": [
						{
							"key": "imageID",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "History",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate status code\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 3. Validate main response structure\r",
							"pm.test(\"Response has correct pagination structure\", function() {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.have.keys(['count', 'next', 'previous', 'results']);\r",
							"    pm.expect(response.count).to.be.a('number').above(0);\r",
							"    pm.expect(response.results).to.be.an('array');\r",
							"});\r",
							"\r",
							"// 4. Define item schema for results\r",
							"const historyItemSchema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        imageID: { type: \"number\", minimum: 1 },\r",
							"        imageS3Url: { \r",
							"            type: \"string\", \r",
							"            pattern: \"^https://d35q6xank26gdf\\\\.cloudfront\\\\.net/.+$\" \r",
							"        },\r",
							"        last_updated_timestamp: { type: \"string\", format: \"date-time\" },\r",
							"        processed_on: { type: \"string\", format: \"date-time\" },\r",
							"        valid_json: { type: \"boolean\" },\r",
							"        version_count: { type: \"number\", minimum: 1 },\r",
							"        last_edited_by: { type: \"string\", minLength: 1 },\r",
							"        status: { type: \"string\", enum: [\"completed\", \"processing\", \"failed\"] }\r",
							"    },\r",
							"    required: [\r",
							"        \"imageID\", \"imageS3Url\", \"last_updated_timestamp\", \"processed_on\",\r",
							"        \"valid_json\", \"version_count\", \"last_edited_by\", \"status\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"// 5. Validate each item in results\r",
							"pm.test(\"All history items have valid structure\", function() {\r",
							"    response.results.forEach(item => {\r",
							"        pm.expect(item).to.be.jsonSchema(historyItemSchema);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Validate S3 URLs\r",
							"pm.test(\"All S3 URLs are valid\", function() {\r",
							"    response.results.forEach(item => {\r",
							"        pm.expect(item.imageS3Url).to.match(/^https:\\/\\/d35q6xank26gdf\\.cloudfront\\.net\\/.+\\/.+\\.png$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Validate version counts\r",
							"pm.test(\"Version counts are positive\", function() {\r",
							"    response.results.forEach(item => {\r",
							"        pm.expect(item.version_count).to.be.a('number').above(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 8. Response performance check\r",
							"pm.test(\"Response time is below 5 seconds\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 9. Header validation\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/history/?username=testuser1",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"history",
						""
					],
					"query": [
						{
							"key": "username",
							"value": "testuser1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Other's Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate status code\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 3. Validate main response structure\r",
							"pm.test(\"Response has correct pagination structure\", function() {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.have.keys(['count', 'next', 'previous', 'results']);\r",
							"    pm.expect(response.count).to.be.a('number').above(0);\r",
							"    pm.expect(response.results).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"// 4. Define item schema for results validation\r",
							"const historyItemSchema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        imageID: { type: \"number\", minimum: 1 },\r",
							"        imageS3Url: { \r",
							"            type: \"string\", \r",
							"            pattern: \"^https://d35q6xank26gdf\\\\.cloudfront\\\\.net/[a-f0-9\\\\-]+/.+\" \r",
							"        },\r",
							"        last_updated_timestamp: { type: \"string\", format: \"date-time\" },\r",
							"        processed_on: { type: \"string\", format: \"date-time\" },\r",
							"        valid_json: { type: \"boolean\" },\r",
							"        version_count: { type: \"number\", minimum: 1 },\r",
							"        last_edited_by: { type: \"string\", pattern: \"^[a-zA-Z0-9]+$\" },\r",
							"        status: { type: \"string\", enum: [\"completed\", \"processing\", \"failed\"] }\r",
							"    },\r",
							"    required: [\r",
							"        \"imageID\", \"imageS3Url\", \"last_updated_timestamp\", \"processed_on\",\r",
							"        \"valid_json\", \"version_count\", \"last_edited_by\", \"status\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"// 5. Validate each item in results\r",
							"pm.test(\"All history items have valid structure\", function() {\r",
							"    response.results.forEach(function(item, index) {\r",
							"        pm.expect(item, \"Item \" + index + \" validation failed\").to.be.jsonSchema(historyItemSchema);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Performance checks\r",
							"pm.test(\"Response time is under 5 second\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 7. Header validation\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/history_all/?username=testuser1",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"history_all",
						""
					],
					"query": [
						{
							"key": "username",
							"value": "testuser1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate status code (assuming 200 for success)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 3. Validate response schema\r",
							"pm.test(\"Response has correct schema\", function() {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response).to.have.all.keys('status', 'last_checked');\r",
							"    pm.expect(response.status).to.be.a('string');\r",
							"    pm.expect(response.last_checked).to.be.a('string');\r",
							"});\r",
							"\r",
							"// 4. Validate specific values\r",
							"pm.test(\"Status is 'OK'\", function() {\r",
							"    pm.expect(response.status).to.eql('OK');\r",
							"});\r",
							"\r",
							"// 5. Content-Type validation\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// 6. Response performance check\r",
							"pm.test(\"Response time is acceptable (<5s)\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/health-check/",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"health-check",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Poll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate status code (assuming 201 for success)\r",
							"pm.test(\"Status code is 201 Created\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// 2. Parse the response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// 3. Validate response is an array\r",
							"pm.test(\"Response is an array\", function() {\r",
							"    pm.expect(response).to.be.an('array');\r",
							"});\r",
							"\r",
							"// 4. Validate array is not empty\r",
							"pm.test(\"Response array contains items\", function() {\r",
							"    pm.expect(response).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"// 5. Define schema for each item\r",
							"const itemSchema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        image_id: {\r",
							"            type: \"number\",\r",
							"            minimum: 1\r",
							"        },\r",
							"        signed_url: {\r",
							"            type: \"string\",\r",
							"            pattern: \"^https://d35q6xank26gdf\\\\.cloudfront\\\\.net/[a-f0-9\\\\-]+/.+\\\\.jpg$\"\r",
							"        },\r",
							"        status: {\r",
							"            type: \"string\",\r",
							"            enum: [\"pending\", \"processing\", \"completed\", \"failed\"]\r",
							"        }\r",
							"    },\r",
							"    required: [\"image_id\", \"signed_url\", \"status\"]\r",
							"};\r",
							"\r",
							"// 6. Validate each item in the array\r",
							"pm.test(\"All items match required schema\", function() {\r",
							"    response.forEach(function(item, index) {\r",
							"        pm.expect(item, `Item ${index} validation failed`).to.be.jsonSchema(itemSchema);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Content-Type validation\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// 8. Response performance check\r",
							"pm.test(\"Response time is acceptable (<5s)\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 9. Store first image_id for future use\r",
							"if (response.length > 0) {\r",
							"    pm.environment.set(\"image_id\", response[0].image_id);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "images",
							"type": "file",
							"src": "postman-cloud:///1f020009-7d65-43e0-8df5-9c791250e5c7"
						}
					]
				},
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/poll/",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"poll",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Use Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Validate status code (assuming 200 for success)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							" \r",
							"// 2. Parse the response\r",
							"const response = pm.response.json();\r",
							" \r",
							"// 3. Define response schema\r",
							"const successSchema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        message: {\r",
							"            type: \"string\",\r",
							"            pattern: \"^Updated successfully$\"\r",
							"        },\r",
							"        version_number: { type: \"number\", minimum: 1 },\r",
							"        updated_json: {\r",
							"            type: \"object\",\r",
							"            properties: {\r",
							"                key1: { type: \"string\" },\r",
							"                key2: { type: \"string\" },\r",
							"                key3: {\r",
							"                    type: \"object\",\r",
							"                    properties: {\r",
							"                        subkey1: { type: \"string\" },\r",
							"                        subkey2: { type: \"string\" }\r",
							"                    },\r",
							"                    required: [\"subkey1\", \"subkey2\"]\r",
							"                }\r",
							"            },\r",
							"            required: [\"key1\", \"key2\", \"key3\"]\r",
							"        }\r",
							"    },\r",
							"    required: [\"message\", \"version_number\", \"updated_json\"]\r",
							"};\r",
							" \r",
							"// 4. Validate against schema\r",
							"pm.test(\"Response matches success schema\", function() {\r",
							"    pm.expect(response).to.be.jsonSchema(successSchema);\r",
							"});\r",
							" \r",
							"// 5. Validate specific values\r",
							"pm.test(\"Success message is correct\", function() {\r",
							"    pm.expect(response.message).to.eql(\"Updated successfully\");\r",
							"});\r",
							" \r",
							"pm.test(\"Version number is valid\", function() {\r",
							"    pm.expect(response.version_number).to.be.a('number').above(0);\r",
							"});\r",
							" \r",
							"// 6. Response time check\r",
							"pm.test(\"Response time is acceptable (<5s)\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							" \r",
							"// 7. Content-Type validation\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"imageID\": {{image_id}},\r\n  \"updatedJson\": {\r\n    \"key1\": \"last version\",\r\n    \"key2\": \"value4\",\r\n    \"key3\": {\r\n      \"subkey1\": \"anything\",\r\n      \"subkey2\": \"subvalue2\"\r\n    }\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/use/",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"use",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Redaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Validate status code (assuming 200 for success)\r",
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DigitreeBaseURL}}/vision_server/redaction/?username=testuser1",
					"host": [
						"{{DigitreeBaseURL}}"
					],
					"path": [
						"vision_server",
						"redaction",
						""
					],
					"query": [
						{
							"key": "username",
							"value": "testuser1"
						}
					]
				}
			},
			"response": []
		}
	]
}